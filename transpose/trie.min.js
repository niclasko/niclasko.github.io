function TrieNode(){this.branch=[];this.entryPointers=[]}
function Trie(h,k){this.trieRootNode=new TrieNode;this.entries=[];this.entryIDs=[];this.entryIDSequence=0;this.isCaseSensitive=h;this.matchSubstrings=k;this.trieCharStarts={};this.addString=function(a){a=this.isCaseSensitive?a:a.toLowerCase();var b=this.matchSubstrings?a.length:1;loading=!0;for(var c=0;c<b;c++)this._addString(a,a.substring(c,a.length),this.trieRootNode,0);loading=!1};this.query=function(a,b){var c=this.isCaseSensitive?a:a.toLowerCase();if(0==c.length)return[];var e=!1;!0==b?e=!0:
!1==b&&(e=!1);var d=b?{}:[],g=this.trieCharStarts[c.charAt(0)];if(void 0!=g)for(var f=0;f<g.length;f++)this._query(g[f],c.substring(1),e,d);return d};this._query=function(a,b,c,e){for(var d="",g=0;g<b.length;g++)if(d=b.charAt(g),d in a.branch)a=a.branch[d];else return[];b=this.expandNode(a);for(var f in b)c?e[this.entries[f]]=b[f]:e.push({entryID:f,entry:this.entries[f]})};this.expandNode=function(a){var b=[];this._expandNode(a,b);return b};this._expandNode=function(a,b){if(0<a.entryPointers.length)for(var c=
0;c<a.entryPointers.length;c++)a.entryPointers[c]in b?b[a.entryPointers[c]]++:b[a.entryPointers[c]]=1;for(var e in a.branch)this._expandNode(a.branch[e],b)};this._addString=function(a,b,c,e){var d=b.charAt(e);e<b.length?(d in c.branch||(c.branch[d]=new TrieNode,void 0==this.trieCharStarts[d]&&(this.trieCharStarts[d]=[]),this.trieCharStarts[d].push(c.branch[d])),this._addString(a,b,c.branch[d],e+1)):e==b.length&&(a in this.entryIDs||(this.entryIDs[a]=this.entryIDSequence++,this.entries.push(a)),c.entryPointers.push(this.entryIDs[a]))}}
;
